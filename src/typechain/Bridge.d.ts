/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BridgeInterface extends ethers.utils.Interface {
  functions: {
    "FEE_BASIS()": FunctionFragment;
    "baseCost(address,uint8)": FunctionFragment;
    "chainGasToken()": FunctionFragment;
    "chainGasValueNeededForFreeUse()": FunctionFragment;
    "chainId()": FunctionFragment;
    "deposit(tuple,tuple,tuple)": FunctionFragment;
    "depositFees(address,tuple,tuple,tuple)": FunctionFragment;
    "feeBreakpoints(uint256)": FunctionFragment;
    "feeDistributor()": FunctionFragment;
    "feePercents(uint256)": FunctionFragment;
    "initialize(uint8,address,address,address,address)": FunctionFragment;
    "minimum(address)": FunctionFragment;
    "nfp()": FunctionFragment;
    "nfpLastUsed(uint256)": FunctionFragment;
    "operator(address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setChainBaseCost(uint8,address,uint256)": FunctionFragment;
    "setChainGasToken(address)": FunctionFragment;
    "setChainGasValueNeededForFreeUse(uint256)": FunctionFragment;
    "setFeeDistributor(address)": FunctionFragment;
    "setFees(uint256[],uint32[])": FunctionFragment;
    "setMinimum(address,uint256)": FunctionFragment;
    "setNFP(address)": FunctionFragment;
    "setOperatorMode(address,uint8)": FunctionFragment;
    "take(uint256,address,address)": FunctionFragment;
    "tokensLastUsed(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateTokenAddress(address,address)": FunctionFragment;
    "withdraw(tuple[])": FunctionFragment;
    "withdrawn(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "FEE_BASIS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseCost",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainGasToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainGasValueNeededForFreeUse",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      { price: BigNumberish; validUntil: BigNumberish; signature: BytesLike },
      { price: BigNumberish; validUntil: BigNumberish; signature: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFees",
    values: [
      string,
      {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      { price: BigNumberish; validUntil: BigNumberish; signature: BytesLike },
      { price: BigNumberish; validUntil: BigNumberish; signature: BytesLike }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeBreakpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "minimum", values: [string]): string;
  encodeFunctionData(functionFragment: "nfp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nfpLastUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "operator", values: [string]): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setChainBaseCost",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainGasToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainGasValueNeededForFreeUse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimum",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setNFP", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOperatorMode",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensLastUsed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTokenAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      {
        id: BytesLike;
        amount: BigNumberish;
        token: string;
        etherAmount: BigNumberish;
        recipient: string;
        fee: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawn",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "FEE_BASIS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainGasValueNeededForFreeUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeBreakpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minimum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nfp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nfpLastUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChainBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainGasToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainGasValueNeededForFreeUse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinimum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNFP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensLastUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawn", data: BytesLike): Result;

  events: {
    "Deposited(address,address,uint8,bool,bool,bool,bytes,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawn(bytes32,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BridgeInterface;

  functions: {
    FEE_BASIS(overrides?: CallOverrides): Promise<[number]>;

    baseCost(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    chainGasToken(overrides?: CallOverrides): Promise<[string]>;

    chainGasValueNeededForFreeUse(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositFees(
      from: string,
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        amountToRecieve: BigNumber;
        cost: BigNumber;
        fee: BigNumber;
        nfpUsed: boolean;
        tokensUsed: boolean;
      }
    >;

    feeBreakpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feeDistributor(overrides?: CallOverrides): Promise<[string]>;

    feePercents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    initialize(
      _chainId: BigNumberish,
      _chainGasToken: string,
      _nfp: string,
      _feeDistributor: string,
      _usdcToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimum(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    nfp(overrides?: CallOverrides): Promise<[string]>;

    nfpLastUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operator(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setChainBaseCost(
      chainTo: BigNumberish,
      token: string,
      _baseCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainGasToken(
      _chainGasToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainGasValueNeededForFreeUse(
      valueNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _feeBreakpoints: BigNumberish[],
      _feePercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinimum(
      token: string,
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFP(
      _nfp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperatorMode(
      account: string,
      mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    take(
      amount: BigNumberish,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensLastUsed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTokenAddress(
      oldToken: string,
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      ws: {
        id: BytesLike;
        amount: BigNumberish;
        token: string;
        etherAmount: BigNumberish;
        recipient: string;
        fee: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawn(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  FEE_BASIS(overrides?: CallOverrides): Promise<number>;

  baseCost(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chainGasToken(overrides?: CallOverrides): Promise<string>;

  chainGasValueNeededForFreeUse(overrides?: CallOverrides): Promise<BigNumber>;

  chainId(overrides?: CallOverrides): Promise<number>;

  deposit(
    d: {
      amount: BigNumberish;
      chainTo: BigNumberish;
      token: string;
      needsEther: boolean;
      recipient: BytesLike;
      nfpId: BigNumberish;
    },
    chainGasPriceData: {
      price: BigNumberish;
      validUntil: BigNumberish;
      signature: BytesLike;
    },
    tokenPriceData: {
      price: BigNumberish;
      validUntil: BigNumberish;
      signature: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositFees(
    from: string,
    d: {
      amount: BigNumberish;
      chainTo: BigNumberish;
      token: string;
      needsEther: boolean;
      recipient: BytesLike;
      nfpId: BigNumberish;
    },
    chainGasPriceData: {
      price: BigNumberish;
      validUntil: BigNumberish;
      signature: BytesLike;
    },
    tokenPriceData: {
      price: BigNumberish;
      validUntil: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      amountToRecieve: BigNumber;
      cost: BigNumber;
      fee: BigNumber;
      nfpUsed: boolean;
      tokensUsed: boolean;
    }
  >;

  feeBreakpoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeDistributor(overrides?: CallOverrides): Promise<string>;

  feePercents(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  initialize(
    _chainId: BigNumberish,
    _chainGasToken: string,
    _nfp: string,
    _feeDistributor: string,
    _usdcToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimum(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  nfp(overrides?: CallOverrides): Promise<string>;

  nfpLastUsed(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operator(arg0: string, overrides?: CallOverrides): Promise<number>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setChainBaseCost(
    chainTo: BigNumberish,
    token: string,
    _baseCost: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainGasToken(
    _chainGasToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainGasValueNeededForFreeUse(
    valueNeeded: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeDistributor(
    _feeDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _feeBreakpoints: BigNumberish[],
    _feePercents: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinimum(
    token: string,
    _minimum: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFP(
    _nfp: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperatorMode(
    account: string,
    mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  take(
    amount: BigNumberish,
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensLastUsed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTokenAddress(
    oldToken: string,
    newToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    ws: {
      id: BytesLike;
      amount: BigNumberish;
      token: string;
      etherAmount: BigNumberish;
      recipient: string;
      fee: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawn(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    FEE_BASIS(overrides?: CallOverrides): Promise<number>;

    baseCost(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainGasToken(overrides?: CallOverrides): Promise<string>;

    chainGasValueNeededForFreeUse(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<number>;

    deposit(
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    depositFees(
      from: string,
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        amountToRecieve: BigNumber;
        cost: BigNumber;
        fee: BigNumber;
        nfpUsed: boolean;
        tokensUsed: boolean;
      }
    >;

    feeBreakpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<string>;

    feePercents(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    initialize(
      _chainId: BigNumberish,
      _chainGasToken: string,
      _nfp: string,
      _feeDistributor: string,
      _usdcToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    minimum(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nfp(overrides?: CallOverrides): Promise<string>;

    nfpLastUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(arg0: string, overrides?: CallOverrides): Promise<number>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setChainBaseCost(
      chainTo: BigNumberish,
      token: string,
      _baseCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainGasToken(
      _chainGasToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainGasValueNeededForFreeUse(
      valueNeeded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _feeBreakpoints: BigNumberish[],
      _feePercents: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimum(
      token: string,
      _minimum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNFP(_nfp: string, overrides?: CallOverrides): Promise<void>;

    setOperatorMode(
      account: string,
      mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    take(
      amount: BigNumberish,
      token: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensLastUsed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateTokenAddress(
      oldToken: string,
      newToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      ws: {
        id: BytesLike;
        amount: BigNumberish;
        token: string;
        etherAmount: BigNumberish;
        recipient: string;
        fee: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawn(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Deposited(
      sender?: string | null,
      token?: string | null,
      to?: BigNumberish | null,
      nfpUsed?: null,
      tokensUsed?: null,
      needsEther?: null,
      recipient?: null,
      amountToRecieve?: null,
      cost?: null,
      fee?: null
    ): TypedEventFilter<
      [
        string,
        string,
        number,
        boolean,
        boolean,
        boolean,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        sender: string;
        token: string;
        to: number;
        nfpUsed: boolean;
        tokensUsed: boolean;
        needsEther: boolean;
        recipient: string;
        amountToRecieve: BigNumber;
        cost: BigNumber;
        fee: BigNumber;
      }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    Withdrawn(
      id?: BytesLike | null,
      token?: string | null,
      recipient?: string | null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        id: string;
        token: string;
        recipient: string;
        amount: BigNumber;
        fee: BigNumber;
      }
    >;
  };

  estimateGas: {
    FEE_BASIS(overrides?: CallOverrides): Promise<BigNumber>;

    baseCost(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainGasToken(overrides?: CallOverrides): Promise<BigNumber>;

    chainGasValueNeededForFreeUse(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositFees(
      from: string,
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeBreakpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    feePercents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _chainId: BigNumberish,
      _chainGasToken: string,
      _nfp: string,
      _feeDistributor: string,
      _usdcToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimum(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nfp(overrides?: CallOverrides): Promise<BigNumber>;

    nfpLastUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setChainBaseCost(
      chainTo: BigNumberish,
      token: string,
      _baseCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainGasToken(
      _chainGasToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainGasValueNeededForFreeUse(
      valueNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFees(
      _feeBreakpoints: BigNumberish[],
      _feePercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinimum(
      token: string,
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFP(
      _nfp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperatorMode(
      account: string,
      mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    take(
      amount: BigNumberish,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensLastUsed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTokenAddress(
      oldToken: string,
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      ws: {
        id: BytesLike;
        amount: BigNumberish;
        token: string;
        etherAmount: BigNumberish;
        recipient: string;
        fee: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawn(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_BASIS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseCost(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainGasToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainGasValueNeededForFreeUse(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositFees(
      from: string,
      d: {
        amount: BigNumberish;
        chainTo: BigNumberish;
        token: string;
        needsEther: boolean;
        recipient: BytesLike;
        nfpId: BigNumberish;
      },
      chainGasPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      tokenPriceData: {
        price: BigNumberish;
        validUntil: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeBreakpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePercents(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _chainId: BigNumberish,
      _chainGasToken: string,
      _nfp: string,
      _feeDistributor: string,
      _usdcToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimum(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nfp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nfpLastUsed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setChainBaseCost(
      chainTo: BigNumberish,
      token: string,
      _baseCost: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainGasToken(
      _chainGasToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainGasValueNeededForFreeUse(
      valueNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDistributor(
      _feeDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _feeBreakpoints: BigNumberish[],
      _feePercents: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinimum(
      token: string,
      _minimum: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFP(
      _nfp: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperatorMode(
      account: string,
      mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    take(
      amount: BigNumberish,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensLastUsed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenAddress(
      oldToken: string,
      newToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      ws: {
        id: BytesLike;
        amount: BigNumberish;
        token: string;
        etherAmount: BigNumberish;
        recipient: string;
        fee: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawn(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
