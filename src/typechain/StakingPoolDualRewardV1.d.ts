/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingPoolDualRewardV1Interface extends ethers.utils.Interface {
  functions: {
    "REWARD_TOKEN0()": FunctionFragment;
    "REWARD_TOKEN1()": FunctionFragment;
    "STAKE_TOKEN()": FunctionFragment;
    "accRewardToken0PerShare()": FunctionFragment;
    "accRewardToken1PerShare()": FunctionFragment;
    "burnAddress()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositBurnFee()": FunctionFragment;
    "depositFee()": FunctionFragment;
    "depositRewards(uint256,uint256)": FunctionFragment;
    "emergencyRewardWithdraw(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "endBlock()": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getStakeTokenFeeBalance()": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reward0PerBlock()": FunctionFragment;
    "reward1PerBlock()": FunctionFragment;
    "rewardBalance()": FunctionFragment;
    "setBurnAddress(address)": FunctionFragment;
    "setEndBlock(uint256)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "setRewardPerBlock(uint256,uint256)": FunctionFragment;
    "skimStakeTokenFees()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "sweepToken(address)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawEther()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "REWARD_TOKEN0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_TOKEN1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accRewardToken0PerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accRewardToken1PerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBurnFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRewardWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeTokenFeeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward0PerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward1PerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "skimStakeTokenFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sweepToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "REWARD_TOKEN0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKEN1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accRewardToken0PerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accRewardToken1PerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositBurnFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRewardWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeTokenFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward0PerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward1PerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "skimStakeTokenFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "DepositRewards(uint256,uint256)": EventFragment;
    "EmergencyRewardWithdraw(address,uint256,uint256)": EventFragment;
    "EmergencySweepWithdraw(address,address,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256)": EventFragment;
    "LogUpdatePool(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetBurnAddress(address,address)": EventFragment;
    "SetFeeAddress(address,address)": EventFragment;
    "SkimStakeTokenFees(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawEther(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyRewardWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencySweepWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBurnAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SkimStakeTokenFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEther"): EventFragment;
}

export class StakingPoolDualRewardV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingPoolDualRewardV1Interface;

  functions: {
    REWARD_TOKEN0(overrides?: CallOverrides): Promise<[string]>;

    REWARD_TOKEN1(overrides?: CallOverrides): Promise<[string]>;

    STAKE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    accRewardToken0PerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    accRewardToken1PerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnAddress(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositBurnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositRewards(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyRewardWithdraw(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeTokenFeeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _stakeToken: string,
      _rewardToken0: string,
      _rewardToken1: string,
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _depositFee: BigNumberish,
      _feeAddress: string,
      _depositBurnFee: BigNumberish,
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward0PerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward1PerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardBalance(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPerBlock(
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    skimStakeTokenFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        reward0Debt: BigNumber;
        reward1Debt: BigNumber;
      }
    >;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  REWARD_TOKEN0(overrides?: CallOverrides): Promise<string>;

  REWARD_TOKEN1(overrides?: CallOverrides): Promise<string>;

  STAKE_TOKEN(overrides?: CallOverrides): Promise<string>;

  accRewardToken0PerShare(overrides?: CallOverrides): Promise<BigNumber>;

  accRewardToken1PerShare(overrides?: CallOverrides): Promise<BigNumber>;

  burnAddress(overrides?: CallOverrides): Promise<string>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

  depositFee(overrides?: CallOverrides): Promise<BigNumber>;

  depositRewards(
    _amount0: BigNumberish,
    _amount1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyRewardWithdraw(
    _amount0: BigNumberish,
    _amount1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeTokenFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _stakeToken: string,
    _rewardToken0: string,
    _rewardToken1: string,
    _reward0PerBlock: BigNumberish,
    _reward1PerBlock: BigNumberish,
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    _depositFee: BigNumberish,
    _feeAddress: string,
    _depositBurnFee: BigNumberish,
    _burnAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward0PerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  reward1PerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  rewardBalance(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  setBurnAddress(
    _burnAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEndBlock(
    _endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPerBlock(
    _reward0PerBlock: BigNumberish,
    _reward1PerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  skimStakeTokenFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  sweepToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      reward0Debt: BigNumber;
      reward1Debt: BigNumber;
    }
  >;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REWARD_TOKEN0(overrides?: CallOverrides): Promise<string>;

    REWARD_TOKEN1(overrides?: CallOverrides): Promise<string>;

    STAKE_TOKEN(overrides?: CallOverrides): Promise<string>;

    accRewardToken0PerShare(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardToken1PerShare(overrides?: CallOverrides): Promise<BigNumber>;

    burnAddress(overrides?: CallOverrides): Promise<string>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewards(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyRewardWithdraw(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeTokenFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakeToken: string,
      _rewardToken0: string,
      _rewardToken1: string,
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _depositFee: BigNumberish,
      _feeAddress: string,
      _depositBurnFee: BigNumberish,
      _burnAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reward0PerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    reward1PerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBalance(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndBlock(
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPerBlock(
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    skimStakeTokenFees(overrides?: CallOverrides): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    sweepToken(token: string, overrides?: CallOverrides): Promise<void>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        reward0Debt: BigNumber;
        reward1Debt: BigNumber;
      }
    >;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawEther(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Deposit(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    DepositRewards(
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount0: BigNumber; amount1: BigNumber }
    >;

    EmergencyRewardWithdraw(
      user?: string | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount0: BigNumber; amount1: BigNumber }
    >;

    EmergencySweepWithdraw(
      user?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    LogUpdatePool(
      endBlock?: null,
      reward0PerBlock?: null,
      reward1PerBlock?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        endBlock: BigNumber;
        reward0PerBlock: BigNumber;
        reward1PerBlock: BigNumber;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    SetBurnAddress(
      user?: string | null,
      newBurnAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { user: string; newBurnAddress: string }
    >;

    SetFeeAddress(
      user?: string | null,
      newFeeAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { user: string; newFeeAddress: string }
    >;

    SkimStakeTokenFees(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    WithdrawEther(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    REWARD_TOKEN0(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_TOKEN1(overrides?: CallOverrides): Promise<BigNumber>;

    STAKE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardToken0PerShare(overrides?: CallOverrides): Promise<BigNumber>;

    accRewardToken1PerShare(overrides?: CallOverrides): Promise<BigNumber>;

    burnAddress(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositBurnFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositFee(overrides?: CallOverrides): Promise<BigNumber>;

    depositRewards(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyRewardWithdraw(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeTokenFeeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakeToken: string,
      _rewardToken0: string,
      _rewardToken1: string,
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _depositFee: BigNumberish,
      _feeAddress: string,
      _depositBurnFee: BigNumberish,
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward0PerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    reward1PerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    rewardBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPerBlock(
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    skimStakeTokenFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REWARD_TOKEN0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_TOKEN1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STAKE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accRewardToken0PerShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accRewardToken1PerShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositBurnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositRewards(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyRewardWithdraw(
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeTokenFeeBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakeToken: string,
      _rewardToken0: string,
      _rewardToken1: string,
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      _depositFee: BigNumberish,
      _feeAddress: string,
      _depositBurnFee: BigNumberish,
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward0PerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward1PerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBurnAddress(
      _burnAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEndBlock(
      _endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPerBlock(
      _reward0PerBlock: BigNumberish,
      _reward1PerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    skimStakeTokenFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweepToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
